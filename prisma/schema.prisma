generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  username      String
  displayName   String?
  avatarUrl     String?
  bio           String?
  sessions      Session[]
  accounts      Account[]
  Profile       Profile?

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model RateLimit {
  id          String  @id
  key         String?
  count       Int?
  lastRequest BigInt?

  @@map("rateLimit")
}

model Profile {
  id              String  @id @default(cuid())
  userId          String  @unique
  backgroundColor String  @default("#ffffff")
  buttonColor     String  @default("#000000")
  buttonTextColor String  @default("#ffffff")
  textColor       String  @default("#000000")
  fontStyle       String  @default("font-sans")
  backgroundImage String?
  isPublic        Boolean @default(true)
  customCss       String?

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  links Link[]

  @@map("profiles")
}

model Link {
  id          String   @id @default(cuid())
  profileId   String
  title       String
  url         String
  description String?
  iconUrl     String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  clicks      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, order])
  @@index([profileId, order])
  @@map("links")
}
